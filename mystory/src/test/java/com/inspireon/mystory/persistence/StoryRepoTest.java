package com.inspireon.mystory.persistence;

import java.text.Normalizer;
import java.util.Collections;
import java.util.List;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.inspireon.mystory.model.domain.comment.Comment;
import com.inspireon.mystory.model.domain.comment.CommentRepo;
import com.inspireon.mystory.model.domain.image.ImageGroup;
import com.inspireon.mystory.model.domain.story.Story;
import com.inspireon.mystory.model.domain.story.StoryRepo;
import com.inspireon.mystory.model.domain.story.Tag;
import com.inspireon.mystory.web.rest.story.reading.CommentSortType;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"/test-context.xml"})
public class StoryRepoTest {

	@Autowired
	StoryRepo storyRepo;
	
	@Autowired
	CommentRepo commentRepo;

	@Ignore
	@Test
	public void testFindByNULLOriginalId_returnNotNullList(){

		String notExistedOriginalStoryId = null;
		
		List<Story> storyListByOriginalId = storyRepo.findByOriginalStoryId(notExistedOriginalStoryId);
		
	    Assert.assertNotNull(storyListByOriginalId);
	}
	
	@Ignore
	@Test
	public void testFindByOriginalId_notFound_returnEmptyList(){

		String notExistedOriginalStoryId = "-1";
		List<Story> emptyStoryList = Collections.emptyList();
		
		List<Story> storyListByOriginalId = storyRepo.findByOriginalStoryId(notExistedOriginalStoryId);
		
	    Assert.assertNotNull(storyListByOriginalId);
	    Assert.assertEquals(storyListByOriginalId, emptyStoryList);
	}
	
	@Ignore
	@Test
	public void testFindByOriginalId_Successfully(){

		String originalStoryId = "5289f8a2870bf270215c7720";
		
		List<Story> storyListByOriginalId = storyRepo.findByOriginalStoryId(originalStoryId);
		
		for (Story story : storyListByOriginalId) {
			System.out.println(story.id());
		}
		
	    Assert.assertNotNull(storyListByOriginalId);
	}
	
	@Test
	public void testFriendLy() {
		List<Story> stories = storyRepo.findAll();
		for (Story story : stories) {
			if (story.friendlyUrl() == null) {
				String normal = Normalizer.normalize(story.title(), Normalizer.Form.NFD);
				String url = normal.replaceAll("\\p{M}", "").replaceAll("Đ", "D").replaceAll("đ", "d").replace(" ", "-");
				story.setFriendlyUrl(url);
				try {
					storyRepo.store(story);
				} catch (Exception e) {
					
				}
			}
		}
		stories = storyRepo.findAll();
		for (Story story : stories) {
			Assert.assertNotNull(story.friendlyUrl());
		}
	}
	
	@Ignore
	@Test
	public void findStoriesEligibleToBeOriginalChapter_Successfully(){
		
		String username = "blueiris";
		
		List<Story> storiesEligibleToBeOriginalChapter = storyRepo.findStoriesEligibleToBeOriginalChapter(username);
		
	    Assert.assertNotNull(storiesEligibleToBeOriginalChapter);
	}
	
	@Ignore
	@Test
	public void testTellNewStory_Successfully(){

		String author = "blueiris";
		String title = "Story title";
		String content = "Content goes here";
		String originalStoryId = null;
		ImageGroup featuredImage = null;
		Tag tag = Tag.LOVE_STORY;
		
		Story newStory = new Story(author, title, content, originalStoryId, featuredImage, tag);
		
		// store the newly created story to repository
		storyRepo.store(newStory);
		
		// get id generated by MongoDB
		String id = newStory.id();
		
		// retrieve this story from repository
		Story retrievedStory = storyRepo.find(id);
		
		Assert.assertEquals(title, retrievedStory.title());
		Assert.assertEquals(content, retrievedStory.content());
		Assert.assertEquals(author, retrievedStory.author());
		Assert.assertEquals(originalStoryId, retrievedStory.originalStoryId());
		Assert.assertEquals(featuredImage, retrievedStory.featuredImage());
		Assert.assertEquals(tag, retrievedStory.tag());
		Assert.assertEquals(0, retrievedStory.upVoters().size());
		Assert.assertEquals(0, retrievedStory.downVoters().size());
		Assert.assertEquals(0, retrievedStory.versions().size());
		Assert.assertEquals(0, retrievedStory.reports().size());
	}
	
//	@Test
//	public void testFindRecentStories() {
//		List<Story> recentStories = storyRepo.findRecentStories();
//		
//		for (Story story : recentStories) {
//			System.out.println(story.submittedDate());
//		}
//	}
	
//	@Test
//	public void findAllStoryWithPagesTest(){
//		Pageable pageable = new PageRequest(1,20);
//		Page<Story> stories = storyRepo.findAllStoryWithPages(pageable);
//		System.out.println(stories.getTotalPages());
//		System.out.println(stories.getContent().size());
//		System.out.println(stories.hasNextPage());
//	}
	
//	@Test
//	public void findAllStoryWithPagesTest(){
//		Pageable pageable = new PageRequest(1, 5, new Sort(Sort.Direction.DESC, "submittedDate"));
//		Page<Story> stories = storyRepo.findAllStoryWithPages(pageable);
//		System.out.println(stories.getTotalPages());
//		System.out.println(stories.getContent().size());
//		System.out.println(stories.hasNextPage());
//	}
	
	@Test
	@Ignore
	public void findStory() {
		Story story = storyRepo.find("52ac12b9182a2af3a78ee471");
		
		System.out.println(story.id());
	}
	
	@Test
	@Ignore
	public void updateLastCommentedTime() {
		List<Story> stories = storyRepo.findAll();
		
		System.out.println(stories.size());
		
		for (Story story : stories) {
			List<Comment> comments = commentRepo.findByStoryId(story.id(), CommentSortType.ALL);
			
			if (comments.size() == 0) {
				story.updateLastCommentedTime(story.submittedDate());
			} else {
				Comment lastComment = comments.get(comments.size() - 1);
				story.updateLastCommentedTime(lastComment.submittedDate());
			}
			
			storyRepo.store(story);
		}
	}
}
