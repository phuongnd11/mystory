package com.inspireon.mystory.persistence;

import java.util.Collections;
import java.util.List;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.inspireon.mystory.model.domain.comment.Comment;
import com.inspireon.mystory.model.domain.comment.CommentRepo;
import com.inspireon.mystory.model.domain.image.ImageGroup;
import com.inspireon.mystory.model.domain.story.Story;
import com.inspireon.mystory.model.domain.story.StoryRepo;
import com.inspireon.mystory.model.domain.story.Tag;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"/test-context.xml"})
public class CommentRepoTest {

	@Autowired
	CommentRepo commentRepo;
	
	@Autowired
	StoryRepo storyRepo;
	
	@Test
	@Ignore
	public void testFindByNULLStoryId_returnEmptyList(){

		String nullStoryId = null;
		List<Comment> emptyCommentList = Collections.<Comment>emptyList();
		
		List<Comment> commentListByStoryId = commentRepo.findByStoryId(nullStoryId, null);
		
	    Assert.assertNotNull(commentListByStoryId);
	    Assert.assertEquals(commentListByStoryId, emptyCommentList);
	}
	
	@Test
	@Ignore
	public void testFindByStoryId_notFound_returnEmptyList(){

		String notExistedStoryId = "-1";
		List<Comment> emptyCommentList = Collections.<Comment>emptyList();
		
		List<Comment> commentListByStoryId = commentRepo.findByStoryId(notExistedStoryId, null);
		
	    Assert.assertNotNull(commentListByStoryId);
	    Assert.assertEquals(commentListByStoryId, emptyCommentList);
	}
	
	@Test
	@Ignore
	public void testAddNewComment_Successfully(){

		String storyTeller = "Story teller";
		String title = "Story title";
		String content = "Story content goes here";
		String originalStoryId = null;
		ImageGroup featuredImage = null;
		Tag tag = Tag.LOVE_STORY; 
		
		Story newStory = new Story(storyTeller, title, content, originalStoryId, featuredImage, tag);
		
		// store the newly created story to repository
		storyRepo.store(newStory);
		
		// get id generated by MongoDB
		String storyId = newStory.id();
		
		String commenter = "Commenter";
		String comment = "Comment content goes here";
		
		Comment newComment = new Comment(comment, commenter, storyId);

		// store the newly created comment to repository
		commentRepo.store(newComment);
				
		// retrieve this story from repository
		Comment retrievedComment = commentRepo.findByStoryId(storyId, null).get(0);
		
		Assert.assertEquals(comment, retrievedComment.content());
		Assert.assertEquals(commenter, retrievedComment.author());
		Assert.assertEquals(storyId, retrievedComment.storyId());
	}
}
